{"version":3,"sources":["components/ColorPicker/ColorPicker.jsx","store/reducers/index.js","store/action-types.js","store/initial-state.js","store/index.js","store/actions/stickers.js","store/actions/theme.js","components/StickerList/StickerListItem/StickerListItem.jsx","components/StickerList/StickerList.jsx","components/Layout/Header/Header.jsx","components/Layout/Footer/Footer.jsx","App.js","index.js"],"names":["ColorPicker","color","handleColorChange","style","position","top","right","onChange","triangle","colors","rootReducer","state","action","type","payload","stickers","id","key","value","map","sticker","filter","theme","isLightTheme","localization","language","initialState","dark","background","light","en","addNewStickerAlt","stickerTitlePlaceholder","stickerTextPlaceholder","changeColorAlt","pinStickerAlt","removeStickerAlt","lightThemeTitle","darkThemeTitle","ua","Store","createContext","init","JSON","parse","localStorage","getItem","StoreProvider","props","useReducer","dispatch","useEffect","setItem","stringify","Provider","children","editSticker","addSticker","uuid","title","text","isPinned","removeSticker","toggleTheme","toggleLanguage","lang","StickerListItem","useContext","showColorPicker","console","log","useState","setState","pinButtonClass","handleChange","e","target","name","handleBlur","handleEdit","className","backgroundColor","onBlur","placeholder","onClick","hex","StickerList","pinnedStickers","unPinnedStickers","length","item","Header","headerStyle","document","body","themeIconClass","Footer","footerStyle","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d115222e.chunk.js","sourcesContent":["import React from 'react';\nimport { GithubPicker } from 'react-color';\n\nconst ColorPicker = ({ color, handleColorChange }) => {\n  return (\n    <div style={{ position: 'absolute', top: '150%', right: '-5px' }}>\n      <GithubPicker\n        color={color}\n        onChange={handleColorChange}\n        triangle=\"top-right\"\n        colors={[\n          '#FCCB00',\n          '#EB9694',\n          '#FAD0C3',\n          '#FEF3BD',\n          '#C1E1C5',\n          '#BEDADC',\n          '#C4DEF6'\n        ]}\n      />\n    </div>\n  );\n};\n\nexport { ColorPicker };\n","import {\n  ADD_STICKER,\n  EDIT_STICKER,\n  REMOVE_STICKER,\n  TOGGLE_THEME,\n  TOGGLE_LANGUAGE\n} from '../action-types';\n\nconst rootReducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case ADD_STICKER:\n      return {\n        ...state,\n        stickers: [payload, ...state.stickers]\n      };\n\n    case EDIT_STICKER:\n      const { id, key, value } = payload;\n      return {\n        ...state,\n        stickers: state.stickers.map(sticker => {\n          if (sticker.id === id) {\n            sticker[key] = value;\n          }\n          return sticker;\n        })\n      };\n\n    case REMOVE_STICKER:\n      return {\n        ...state,\n        stickers: state.stickers.filter(sticker => sticker.id !== payload)\n      };\n\n    case TOGGLE_THEME:\n      return {\n        ...state,\n        theme: { ...state.theme, isLightTheme: !payload }\n      };\n\n    case TOGGLE_LANGUAGE:\n      return {\n        ...state,\n        localization: { ...state.localization, language: payload }\n      };\n    default:\n      return state;\n  }\n};\n\nexport { rootReducer };\n","export const ADD_STICKER = 'ADD_STICKER';\nexport const EDIT_STICKER = 'EDIT_STICKER';\nexport const REMOVE_STICKER = 'REMOVE_STICKER';\nexport const TOGGLE_THEME = 'TOGGLE_THEME';\nexport const TOGGLE_LANGUAGE = 'TOGGLE_LANGUAGE';\n","const initialState = {\n  theme: {\n    isLightTheme: false,\n    dark: { background: '#052b3c', color: '#fff' },\n    light: { background: '#fff', color: '#052b3c' }\n  },\n  localization: {\n    language: 'en',\n    en: {\n      addNewStickerAlt: 'Add new sticker',\n      stickerTitlePlaceholder: 'Enter title...',\n      stickerTextPlaceholder: 'Enter text...',\n      changeColorAlt: 'Change sticker color',\n      pinStickerAlt: 'Pin sticker',\n      removeStickerAlt: 'Remove sticker',\n      lightThemeTitle: 'Switch to light theme',\n      darkThemeTitle: 'Switch to dark theme'\n    },\n    ua: {\n      addNewStickerAlt: 'Додати новий стікер',\n      stickerTitlePlaceholder: 'Введіть назву...',\n      stickerTextPlaceholder: 'Введіть текст...',\n      changeColorAlt: 'Змінити колір стікера',\n      pinStickerAlt: 'Прикріпити стікер',\n      removeStickerAlt: 'Видалити стікер',\n      lightThemeTitle: 'Включити світлу тему',\n      darkThemeTitle: 'Включити темну тему'\n    }\n  },\n  stickers: []\n};\n// document.body.style.backgroundColor = initialState.theme.dark.background;\n\nexport default initialState;\n","import React, { createContext, useReducer, useEffect } from 'react';\nimport { rootReducer } from './reducers';\nimport initialState from './initial-state';\n\nconst Store = createContext();\n\nconst init = () => {\n  return JSON.parse(localStorage.getItem('StickIt')) || initialState;\n};\n\nconst StoreProvider = props => {\n  const [state, dispatch] = useReducer(\n    rootReducer,\n    initialState,\n    init\n    // TODO save user to LS\n  );\n\n  useEffect(() => {\n    localStorage.setItem('StickIt', JSON.stringify(state));\n  });\n\n  return (\n    <Store.Provider value={{ ...state, dispatch }}>\n      {props.children}\n    </Store.Provider>\n  );\n};\n\nexport { Store, StoreProvider };\n","import { ADD_STICKER, EDIT_STICKER, REMOVE_STICKER } from '../action-types';\nimport uuid from 'uuid/v1';\n\nexport const editSticker = (id, key, value) => ({\n  type: EDIT_STICKER,\n  payload: { id, key, value }\n});\nexport const addSticker = () => {\n  const newSticker = {\n    id: uuid(),\n    title: '',\n    text: '',\n    color: '#fef3bd',\n    isPinned: false\n  };\n  return { type: ADD_STICKER, payload: newSticker };\n};\n\nexport const removeSticker = id => ({ type: REMOVE_STICKER, payload: id });\n","import { TOGGLE_THEME, TOGGLE_LANGUAGE } from '../action-types';\n\nexport const toggleTheme = isLightTheme => ({\n  type: TOGGLE_THEME,\n  payload: isLightTheme\n});\n\nexport const toggleLanguage = lang => ({\n  type: TOGGLE_LANGUAGE,\n  payload: lang\n});\n","import React, { useState, useContext } from 'react';\nimport { ColorPicker } from 'components/ColorPicker';\nimport { Store } from 'store';\nimport { removeSticker, editSticker } from 'store/actions';\nimport './StickerListItem.scss';\n\nconst StickerListItem = ({ sticker }) => {\n  const {\n    dispatch,\n    localization: { language, en, ua }\n  } = useContext(Store);\n  const { id, color, isPinned } = sticker;\n  const initialState = {\n    title: sticker.title,\n    text: sticker.text,\n    showColorPicker: false\n  };\n\n  const lang = language === 'en' ? en : ua;\n  console.log(lang);\n\n  const [state, setState] = useState(initialState);\n  const { title, text, showColorPicker } = state;\n  const pinButtonClass = isPinned\n    ? 'sticker__btn icon-pin'\n    : 'sticker__btn icon-pin-outline';\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setState({ ...state, [name]: value });\n  }\n  function handleBlur(e) {\n    const { name, value } = e.target;\n    handleEdit(name, value);\n  }\n  function handleRemoveClick() {\n    dispatch(removeSticker(id));\n  }\n  function handleColorClick() {\n    setState({ ...state, showColorPicker: !showColorPicker });\n  }\n  function handleColorChange(color) {\n    handleEdit('color', color.hex);\n  }\n  function handlePinClick() {\n    handleEdit('isPinned', !isPinned);\n  }\n  function handleEdit(key, value) {\n    dispatch(editSticker(id, key, value));\n  }\n\n  return (\n    <li className=\"stickers__item sticker\">\n      <div className=\"sticker__container\" style={{ backgroundColor: color }}>\n        <div className=\"sticker__header\">\n          <input\n            className=\"sticker__title\"\n            type=\"text\"\n            value={title}\n            name=\"title\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder={lang.stickerTitlePlaceholder}\n          />\n          <div className=\"sticker__controls\">\n            <button\n              className=\"sticker__btn icon-color-adjust\"\n              onClick={handleColorClick}\n              title={lang.changeColorAlt}\n            >\n              {showColorPicker ? (\n                <ColorPicker\n                  color={color}\n                  handleColorChange={handleColorChange}\n                />\n              ) : null}\n            </button>\n            <button\n              className={pinButtonClass}\n              onClick={handlePinClick}\n              title={lang.pinStickerAlt}\n            />\n            <button\n              className=\"sticker__btn icon-trash-empty\"\n              onClick={handleRemoveClick}\n              title={lang.removeStickerAlt}\n            />\n          </div>\n        </div>\n        <div className=\"sticker__details\">\n          <textarea\n            className=\"sticker__text\"\n            name=\"text\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            type=\"textarea\"\n            value={text}\n            placeholder={lang.stickerTextPlaceholder}\n          />\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport { StickerListItem };\n","import React, { useContext } from 'react';\nimport { StickerListItem } from './StickerListItem';\nimport { Store } from 'store';\nimport './StickerList.scss';\n\nexport const StickerList = () => {\n  const { stickers } = useContext(Store);\n  const pinnedStickers = stickers.filter(sticker => sticker.isPinned);\n  const unPinnedStickers = stickers.filter(\n    sticker => sticker.isPinned === false\n  );\n\n  return (\n    <>\n      {pinnedStickers.length > 0 && (\n        <ul className=\"sticker-list sticker-list--pinned\">\n          {pinnedStickers.map(item => (\n            <StickerListItem sticker={item} key={item.id} />\n          ))}\n        </ul>\n      )}\n      <ul className=\"sticker-list\">\n        {unPinnedStickers.map(item => (\n          <StickerListItem sticker={item} key={item.id} />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Store } from 'store';\nimport { addSticker, toggleTheme, toggleLanguage } from 'store/actions';\n\nimport './Header.scss';\n\nconst Header = () => {\n  const {\n    theme: { isLightTheme, light, dark },\n    localization: { language, en, ua },\n    dispatch\n  } = useContext(Store);\n\n  const headerStyle = isLightTheme ? light : dark;\n  document.body.style.backgroundColor = headerStyle.background;\n\n  const lang = language === 'en' ? en : ua;\n\n  const themeIconClass = isLightTheme\n    ? 'header__menu__btn icon-moon'\n    : 'header__menu__btn icon-sun';\n\n  function onToggleLanguage() {\n    dispatch(toggleLanguage(language === 'en' ? 'ua' : 'en'));\n  }\n\n  function handleToggleTheme() {\n    dispatch(toggleTheme(isLightTheme));\n  }\n\n  function AddSticker() {\n    dispatch(addSticker());\n  }\n\n  return (\n    <>\n      <header style={headerStyle}>\n        <div className=\"wrapper header\">\n          <div className=\"header__logo\">StickIt</div>\n          <div className=\"header__menu\">\n            <button\n              className=\"header__menu__btn icon-plus\"\n              onClick={AddSticker}\n              title={lang.addNewStickerAlt}\n            />\n            <button className=\"header__menu__btn\" onClick={onToggleLanguage}>\n              {language}\n            </button>\n            <button\n              className={themeIconClass}\n              onClick={handleToggleTheme}\n              title={isLightTheme ? lang.darkThemeTitle : lang.lightThemeTitle}\n            />\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nexport { Header };\n","import React, { useContext } from 'react';\nimport { Store } from 'store';\n\nconst Footer = () => {\n  const { theme } = useContext(Store);\n  const { isLightTheme, light, dark } = theme;\n  const footerStyle = isLightTheme ? light : dark;\n\n  return (\n    <footer style={footerStyle}>\n      <div className=\"wrapper\">© Serhii Tyshchenko, 2020</div>\n    </footer>\n  );\n};\n\nexport { Footer };\n","import React from 'react';\n\nimport { Header, Footer, StickerList } from 'components';\nimport { StoreProvider } from 'store';\n\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <StoreProvider>\n      <Header />\n      <main className=\"wrapper\">\n        <StickerList />\n      </main>\n      <Footer />\n    </StoreProvider>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}